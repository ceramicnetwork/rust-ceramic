/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 *
 * @remarks
 * Contains TypeScript types representing the API paths, components, schemas, and operations
 * defined in the OpenAPI specification for the Ceramic node.
 */

export interface paths {
  /**
   * Endpoints for testing the liveness of the Ceramic node.
   */
  '/liveness': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Test the liveness of the Ceramic node.
     *
     * @remarks
     * Sends a GET request to verify that the Ceramic node is operational.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  /**
   * Endpoints for retrieving heap statistics.
   */
  '/debug/heap': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the heap statistics of the Ceramic node.
     *
     * @remarks
     * Provides details about the heap memory usage for debugging purposes.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response with heap statistics.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/octet-stream': string
          }
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  /**
   * Endpoints for retrieving the version of the Ceramic node.
   */
  '/version': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /**
     * Get the version of the Ceramic node.
     *
     * @remarks
     * Provides the version number of the Ceramic node in semver format.
     */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response with the version information.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Version']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    /** Get the version of the Ceramic node */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response with the version information.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Version']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  /**
   * Endpoints for managing Ceramic events.
   */
  '/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /**
     * Creates a new Ceramic event.
     *
     * @remarks
     * Posts a new event to the Ceramic node.
     */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: components['requestBodies']['EventData']
      responses: {
        /**
         * Successful creation of the event.
         */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  /**
   * Retrieves the details of a specific event.
   */
  '/events/{event_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get event data */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /**
           * CID string of the root block of the event.
           *
           * @remarks
           * Used to uniquely identify the event.
           */
          event_id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful retrieval of event details.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['Event']
          }
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Event not found.
         */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path: {
          /**
           * Name of the field in the Events header that holds the separator value.
           */
          event_id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/streams/{stream_id}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get stream state */
    get: {
      parameters: {
        query?: never
        header?: never
        path: {
          /**
           * Multibase encoded stream ID
           */
          stream_id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['StreamState']
          }
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Stream not found
         */
        404: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'text/plain': string
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path: {
          /**
           * Multibase encoded stream ID
           */
          stream_id: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/interests/{sort_key}/{sort_value}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Register interest for a sort key */
    post: {
      parameters: {
        query?: {
          /**
           * the controller to register interest for
           */
          controller?: string
          /**
           * the stream to register interest for
           */
          streamId?: string
        }
        header?: never
        path: {
          /**
           * name of the sort_key
           */
          sort_key: string
          /**
           * value associated with the sort key
           */
          sort_value: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path: {
          /**
           * Name of the field in the Events header that holds the separator value e.g. 'model'
           */
          sort_key: string
          /**
           * The value of the field in the Events header indicated by the separator key e.g. multibase encoded model ID
           */
          sort_value: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/interests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    get?: never
    put?: never
    /** Register interest for a sort key */
    post: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody: components['requestBodies']['Interest']
      responses: {
        /**
         * Successful response.
         */
        204: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/config/network': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get info about the Ceramic network the node is connected to */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['NetworkInfo']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/experimental/interests': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the interests stored on the node */
    get: {
      parameters: {
        query?: {
          /**
           * Only return interests from the specified peer ID.
           */
          peerId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['InterestsGet']
          }
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: {
          /**
           * Only return interests from the specified peer ID.
           */
          peerId?: string
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/experimental/events/{sep}/{sepValue}': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get events matching the interest stored on the node */
    get: {
      parameters: {
        query?: {
          /**
           * the controller to filter (DID string)
           */
          controller?: string
          /**
           * the stream to filter (multibase encoded stream ID)
           */
          streamId?: string
          /**
           * token that designates the point to resume from, that is find keys added after this point
           */
          offset?: number
          /**
           * the maximum number of events to return, default is 10000.
           */
          limit?: number
        }
        header?: never
        path: {
          /**
           * Name of the field in the Events header that holds the separator value e.g. 'model'
           */
          sep: string
          /**
           * The value of the field in the Events header indicated by the separator key e.g. multibase encoded model ID
           */
          sepValue: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['EventsGet']
          }
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path: {
          /**
           * Name of the field in the Events header that holds the separator value e.g. 'model'
           */
          sep: string
          /**
           * The value of the field in the Events header indicated by the separator key e.g. multibase encoded model ID
           */
          sepValue: string
        }
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/feed/events': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get all new event keys since resume token */
    get: {
      parameters: {
        query?: {
          /**
           * token that designates the point to resume from, that is find keys added after this point
           */
          resumeAt?: string
          /**
           * The maximum number of events to return, default is 100. The max with data is 10000.
           */
          limit?: number
          /** Whether to include the event data (carfile) in the response. In the future, only the payload or other options may be supported:
           ** `none` - Empty, only the event ID is returned
           ** `full` - The entire event carfile (including the envelope and payload)
           */
          includeData?: 'none' | 'full'
        }
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['EventFeed']
          }
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
  '/feed/resumeToken': {
    parameters: {
      query?: never
      header?: never
      path?: never
      cookie?: never
    }
    /** Get the current (maximum) highwater mark/continuation token of the feed. Allows starting `feed/events` from 'now'. */
    get: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Successful response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['_feed_resumeToken_get_200_response']
          }
        }
        /**
         * Bad request error.
         */
        400: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['BadRequestResponse']
          }
        }
        /**
         * Internal server error.
         */
        500: {
          headers: {
            [name: string]: unknown
          }
          content: {
            'application/json': components['schemas']['ErrorResponse']
          }
        }
      }
    }
    put?: never
    post?: never
    delete?: never
    /** cors */
    options: {
      parameters: {
        query?: never
        header?: never
        path?: never
        cookie?: never
      }
      requestBody?: never
      responses: {
        /**
         * Cross-Origin Resource Sharing (CORS) preflight response.
         */
        200: {
          headers: {
            [name: string]: unknown
          }
          content?: never
        }
      }
    }
    head?: never
    patch?: never
    trace?: never
  }
}
export type webhooks = Record<string, never>
export interface components {
  schemas: {
    /**
     * Version of the Ceramic node in semver format, e.g. 2.1.0
     * @example {
     *       "version": "version"
     *     }
     */
    Version: {
      /**
       * Version of the Ceramic node
       */
      version?: string
    }
    /**
     * Response to a bad request (400) error.
     */
    BadRequestResponse: {
      /**
       * Message describing the error
       */
      message: string
    }
    /**
     * A Ceramic Event
     * A Ceramic event as part of a Ceramic Stream. Contains both the root CID used to identify the Event as well as the Event payload data.
     * @example {
     *       "data": "data",
     *       "id": "id"
     *     }
     */
    Event: {
      /**
       * Multibase encoding of event root CID bytes.
       */
      id: string
      /**
       * Multibase encoding of event data.
       */
      data?: string
    }
    /**
     * A Ceramic Event Data Payload
     * The data for a Ceramic event that is part of a Ceramic Stream
     * @example {
     *       "data": "data"
     *     }
     */
    EventData: {
      /**
       * Multibase encoding of event data.
       */
      data: string
    }
    /**
     * Ceramic Event feed data
     * Ceramic event keys as part of a Ceramic Stream
     * @example {
     *       "resumeToken": "resumeToken",
     *       "events": [
     *         {
     *           "data": "data",
     *           "id": "id"
     *         },
     *         {
     *           "data": "data",
     *           "id": "id"
     *         }
     *       ]
     *     }
     */
    EventFeed: {
      /**
       * An array of events. For now, the event data payload is empty.
       */
      events: components['schemas']['Event'][]
      /**
       * The token/highwater mark to used as resumeAt on a future request
       */
      resumeToken: string
    }
    /**
     * Information about multiple events.
     * Ceramic event keys as part of a Ceramic Stream
     * @example {
     *       "resumeOffset": 0,
     *       "events": [
     *         {
     *           "data": "data",
     *           "id": "id"
     *         },
     *         {
     *           "data": "data",
     *           "id": "id"
     *         }
     *       ],
     *       "isComplete": true
     *     }
     */
    EventsGet: {
      /**
       * An array of events
       */
      events: components['schemas']['Event'][]
      /**
       * An integer specifying where to resume the request. Only works correctly for the same input parameters.
       */
      resumeOffset: number
      /**
       * A boolean specifying if there are more events to be fetched. Repeat with the resumeOffset to get next set.
       */
      isComplete: boolean
    }
    /**
     * Information about multiple interests.
     * Ceramic interest keys
     * @example {
     *       "interests": [
     *         {
     *           "data": "data"
     *         },
     *         {
     *           "data": "data"
     *         }
     *       ]
     *     }
     */
    InterestsGet: {
      /**
       * An array of interests
       */
      interests: components['schemas']['InterestsGet_interests_inner'][]
    }
    /**
     * Error response
     */
    ErrorResponse: {
      /**
       * Error message
       */
      message: string
    }
    /**
     * A recon interest
     * Describes a recon interest range to store and synchronize
     * @example {
     *       "controller": "controller",
     *       "streamId": "streamId",
     *       "sepValue": "sepValue",
     *       "sep": "sep"
     *     }
     */
    Interest: {
      /**
       * Separator key, typically 'model' (sometimes called sort_key)
       */
      sep: string
      /**
       * Multibase encoded separator value (sometimes called sort_value, typically a stream ID)
       */
      sepValue: string
      /**
       * Decentralized identifier (DID) string
       */
      controller?: string
      /**
       * Multibase encoded stream ID.
       */
      streamId?: string
    }
    /**
     * Information about the Ceramic network
     * Ceramic network information
     * @example {
     *       "name": "name"
     *     }
     */
    NetworkInfo: {
      /**
       * Name of the Ceramic network
       */
      name: string
    }
    /**
     * State of a Ceramic stream
     * The state of a Ceramic stream as defined by the stream type aggregation and conflict resolution rules.
     * @example {
     *       "controller": "controller",
     *       "data": "data",
     *       "id": "id",
     *       "event_cid": "event_cid",
     *       "dimensions": "{}"
     *     }
     */
    StreamState: {
      /**
       * Multibase encoding of the stream id
       */
      id: string
      /**
       * CID of the event that produced this state
       */
      event_cid: string
      /**
       * Controller of the stream
       */
      controller: string
      /**
       * Dimensions of the stream, each value is multibase encoded.
       */
      dimensions: Record<string, never>
      /**
       * Multibase encoding of the data of the stream. Content is stream type specific.
       */
      data: string
    }
    /** @example {
     *       "resumeToken": "resumeToken"
     *     } */
    _feed_resumeToken_get_200_response: {
      /**
       * The highwater mark/resume token to use with the event/feed endpoint.
       */
      resumeToken: string
    }
    /** @example {
     *       "data": "data"
     *     } */
    InterestsGet_interests_inner: {
      /**
       * The multbase encoded bytes of the interest.
       */
      data: string
    }
  }
  responses: never
  parameters: never
  requestBodies: {
    /**
     * Event to add to the node
     */
    EventData: {
      content: {
        'application/json': components['schemas']['EventData']
      }
    }
    /**
     * Recon message to send.
     */
    Message: {
      content: {
        'application/cbor-seq': string
      }
    }
    /**
     * Interest to register on the node
     */
    Interest: {
      content: {
        'application/json': components['schemas']['Interest']
      }
    }
  }
  headers: never
  pathItems: never
}
export type $defs = Record<string, never>
export type operations = Record<string, never>
