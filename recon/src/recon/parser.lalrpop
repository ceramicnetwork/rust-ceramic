use super::*;

grammar;

pub SequenceSetup : SequenceSetup<AlphaNumBytes> = {
    "cat:" <cat:SetupState> "dog:" <dog:SetupState> => SequenceSetup {
        cat,
        dog,
    },
};

SetupState: SetupState<AlphaNumBytes> = {
    <interests:Interests?> <state:State> => SetupState {
        interests: interests.unwrap_or_else(|| FixedInterests::full()),
        state,
    }
};

Interests: FixedInterests<AlphaNumBytes> = {
    "<" <first:Interest> <rest:("," <Interest>)*> ">" => {
        let mut interests = Vec::new();
        interests.push(first);
        interests.extend(rest.into_iter());
        FixedInterests(interests)
    }
};

Interest: RangeOpen<AlphaNumBytes> = {
    "(" <start:Word> "," <end:Word> ")" => (start, end).into()
};

State: BTreeSet<AlphaNumBytes> = {
    "[" <StateInner> "]" => <>
};

StateInner: BTreeSet<AlphaNumBytes> = {
    <first:Key?> <rest:("," <Key>)*> => {
        let mut state = BTreeSet::<AlphaNumBytes>::new();
        state.extend(rest.into_iter());
        if let Some(first) = first {
            state.insert(first);
        }
        state
    }
};

Key: AlphaNumBytes = {
    <key:Word> => key,
}

Word : AlphaNumBytes = {
    r"[a-zA-Z0-9-]*"=> AlphaNumBytes::from(<>.to_string()),
    r"𝚨"=> AlphaNumBytes::min_value(),
    r"𝛀"=> AlphaNumBytes::max_value(),
};

