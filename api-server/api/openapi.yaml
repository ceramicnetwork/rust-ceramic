openapi: 3.0.0
info:
  description: |
    This is the Ceramic API for working with streams and events
  license:
    name: MIT
    url: https://mit-license.org/
  title: Ceramic API
  version: 0.10.1
servers:
- url: /ceramic
paths:
  /liveness:
    get:
      responses:
        "200":
          description: success
      summary: Test the liveness of the Ceramic node
  /version:
    post:
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: success
      summary: Get the version of the Ceramic node
  /subscribe/{sort_key}/{sort_value}:
    get:
      parameters:
      - description: name of the sort_key
        explode: false
        in: path
        name: sort_key
        required: true
        schema:
          type: string
        style: simple
      - description: value associated with the sort key
        explode: false
        in: path
        name: sort_value
        required: true
        schema:
          type: string
        style: simple
      - description: the controller to subscribe to.
        explode: true
        in: query
        name: controller
        required: false
        schema:
          type: string
        style: form
      - description: the stream to subscribe to.
        explode: true
        in: query
        name: streamId
        required: false
        schema:
          type: string
        style: form
      - description: "the number of events to skip in the given range, default is\
          \ 0."
        explode: true
        in: query
        name: offset
        required: false
        schema:
          type: number
        style: form
      - description: "the maximum number of events to return, default is no limit."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: number
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/EventDeprecated'
                type: array
          description: success
      summary: Get events for a stream
  /events:
    post:
      requestBody:
        $ref: '#/components/requestBodies/EventTemp'
      responses:
        "204":
          description: success
        "400":
          content:
            application/json:
              schema:
                type: string
          description: bad request
      summary: Creates a new event
  /events/{event_id}:
    get:
      parameters:
      - description: identifier of the event
        explode: false
        in: path
        name: event_id
        required: true
        schema:
          type: string
        style: simple
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: success
        "404":
          content:
            text/plain:
              schema:
                type: string
          description: Event not found
      summary: Get event data
  /interests/{sort_key}/{sort_value}:
    post:
      parameters:
      - description: name of the sort_key
        explode: false
        in: path
        name: sort_key
        required: true
        schema:
          type: string
        style: simple
      - description: value associated with the sort key
        explode: false
        in: path
        name: sort_value
        required: true
        schema:
          type: string
        style: simple
      - description: the controller to register interest for
        explode: true
        in: query
        name: controller
        required: false
        schema:
          type: string
        style: form
      - description: the stream to register interest for
        explode: true
        in: query
        name: streamId
        required: false
        schema:
          type: string
        style: form
      responses:
        "204":
          description: success
      summary: Register interest for a sort key
  /feed/events:
    get:
      parameters:
      - description: "token that designates the point to resume from, that is find\
          \ keys added after this point"
        explode: true
        in: query
        name: resumeAt
        required: false
        schema:
          type: string
        style: form
      - description: "the maximum number of events to return, default is 10000."
        explode: true
        in: query
        name: limit
        required: false
        schema:
          type: integer
        style: form
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFeed'
          description: success
        "400":
          content:
            application/json:
              schema:
                type: string
          description: bad request
      summary: Get all new event keys since resume token
components:
  requestBodies:
    EventTemp:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/_events_post_request'
      required: true
    Event:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Event'
      description: Event to add to the node
      required: true
    Message:
      content:
        application/cbor-seq:
          schema:
            format: byte
            type: string
      description: Recon message to send
      required: true
  schemas:
    Version:
      description: "Version of the Ceramic node in semver format, e.g. 2.1.0"
      example:
        version: version
      properties:
        version:
          description: Version of the Ceramic node
          type: string
    EventDeprecated:
      description: A Ceramic event as part of a Ceramic Stream
      example:
        eventId: eventId
        eventData: eventData
      properties:
        eventId:
          description: Multibase encoding of event id bytes.
          type: string
        eventData:
          description: Multibase encoding of event data.
          type: string
      required:
      - eventData
      - eventId
      title: A Ceramic Event (deprecated. Use Event instead)
      type: object
    Event:
      description: A Ceramic event as part of a Ceramic Stream
      example:
        data: data
        id: id
      properties:
        id:
          description: Multibase encoding of event id bytes.
          type: string
        data:
          description: Multibase encoding of event data.
          type: string
      required:
      - data
      - id
      title: A Ceramic Event
      type: object
    EventFeed:
      description: Ceramic event keys as part of a Ceramic Stream
      example:
        resumeToken: resumeToken
        events:
        - data: data
          id: id
        - data: data
          id: id
      properties:
        events:
          description: "An array of events. For now, the value is empty."
          items:
            $ref: '#/components/schemas/Event'
          type: array
        resumeToken:
          description: The token/highwater mark to used as resumeAt on a future request
          type: string
      required:
      - events
      - resumeToken
      title: Ceramic Event feed data
      type: object
    _events_post_request:
      description: "Event to add to the node. Temp while we transition to id/data\
        \ style, at which time we can swap this out for the Event schema."
      properties:
        id:
          description: Multibase encoding of event id bytes.
          type: string
        data:
          description: Multibase encoding of event data.
          type: string
        eventId:
          description: Multibase encoding of event id bytes.
          type: string
        eventData:
          description: Multibase encoding of event data.
          type: string
      type: object

