openapi: 3.0.0
info:
  description: >
    This is the Ceramic API for working with streams and events
  version: 0.11.0
  title: Ceramic API
    #license:
    #  name: Apache 2.0
    #  url: http://www.apache.org/licenses/LICENSE-2.0.html
  license:
    name: MIT
    url: https://mit-license.org/

servers:
  - url: /ceramic

paths:
  /liveness:
    get:
      summary: Test the liveness of the Ceramic node
      responses:
        "200":
          description: success
  /version:
    post:
      summary: Get the version of the Ceramic node
      responses:
        "200":
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Version'
          description: success
  '/subscribe/{sort_key}/{sort_value}':
    get:
      summary: Get events for a stream
      parameters:
        - name: sort_key
          in: path
          description: name of the sort_key
          schema:
            type: string
          required: true
        - name: sort_value
          in: path
          description: value associated with the sort key
          schema:
            type: string
          required: true
        - name: controller
          in: query
          description: the controller to subscribe to.
          required: false
          schema:
            type: string
        - name: streamId
          in: query
          description: the stream to subscribe to.
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: the number of events to skip in the given range, default is 0.
          required: false
          schema:
            type: number
        - name: limit
          in: query
          description: the maximum number of events to return, default is no limit.
          required: false
          schema:
            type: number
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EventDeprecated'
  /events:
    post:
      summary: Creates a new event
      requestBody:
        $ref: '#/components/requestBodies/EventTemp'
      responses:
        '204':
          description: success
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: string

  /events/{event_id}:
    get:
      summary: Get event data
      parameters:
        - name: event_id
          in: path
          description: identifier of the event
          schema:
            type: string
          required: true
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
        '404':
          description: Event not found
          content:
            text/plain:
              schema:
                type: string
  '/interests/{sort_key}/{sort_value}':
    post:
      summary: Register interest for a sort key
      parameters:
        - name: sort_key
          in: path
          description: name of the sort_key
          schema:
            type: string
          required: true
        - name: sort_value
          in: path
          description: value associated with the sort key
          schema:
            type: string
          required: true
        - name: controller
          in: query
          description: the controller to register interest for
          required: false
          schema:
            type: string
        - name: streamId
          in: query
          description: the stream to register interest for
          required: false
          schema:
            type: string
      responses:
        '204':
          description: success

  '/events/{sort_key}/{sort_value}':
    get:
      summary: Get events matching the interest stored on the node 
      parameters:
        - name: sort_key
          in: path
          description: name of the sort_key e.g. 'model'
          schema:
            type: string
          required: true
        - name: sort_value
          in: path
          description: value associated with the sort key e.g. model ID
          schema:
            type: string
          required: true
        - name: controller
          in: query
          description: the controller to filter 
          required: false
          schema:
            type: string
        - name: streamId
          in: query
          description: the stream to filter 
          required: false
          schema:
            type: string
        - name: offset
          in: query
          description: token that designates the point to resume from, that is find keys added after this point
          schema:
            type: integer
          required: false
        - name: limit
          in: query
          description: the maximum number of events to return, default is 10000.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventsGet'

  '/feed/events':
    get:
      summary: Get all new event keys since resume token
      parameters:
        - name: resumeAt
          in: query
          description: token that designates the point to resume from, that is find keys added after this point
          schema:
            type: string
          required: false
        - name: limit
          in: query
          description: the maximum number of events to return, default is 10000.
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EventFeed'
        '400':
          description: bad request
          content:
            application/json:
              schema:
                type: string
components:
  requestBodies:
    EventTemp:
      content:
        application/json:
          schema:
            type: object
            properties:
              id:
                type: string
                description: Multibase encoding of event id bytes.
              data:
                type: string
                description: Multibase encoding of event data.
              eventId:
                type: string
                description: Multibase encoding of event id bytes.
              eventData:
                type: string
                description: Multibase encoding of event data.
            description: Event to add to the node. Temp while we transition to id/data style, at which time we can swap this out for the Event schema.
      required: true
    Event:
      content:
        application/json:
          schema:
              $ref: '#/components/schemas/Event'
      description: Event to add to the node
      required: true
    Message:
      content:
        application/cbor-seq:
          schema:
            format: byte
            type: string
      description: Recon message to send
      required: true
  schemas:
    Version:
      description: Version of the Ceramic node in semver format, e.g. 2.1.0
      properties:
        version:
          type: string
          description: Version of the Ceramic node
    EventDeprecated:
      title: A Ceramic Event (deprecated. Use Event instead)
      description: A Ceramic event as part of a Ceramic Stream
      type: object
      required:
        - eventId
        - eventData
      properties:
        eventId:
          type: string
          description: Multibase encoding of event id bytes.
        eventData:
          type: string
          description: Multibase encoding of event data.
    Event:
      title: A Ceramic Event
      description: A Ceramic event as part of a Ceramic Stream
      type: object
      required:
        - id
        - data
      properties:
        id:
          type: string
          description: Multibase encoding of event id bytes.
        data:
          type: string
          description: Multibase encoding of event data.
    EventFeed:
      title: Ceramic Event feed data
      description: Ceramic event keys as part of a Ceramic Stream
      type: object
      required:
        - events
        - resumeToken
      properties:
        events:
          type: array
          items:
            schema:
            $ref: '#/components/schemas/Event'
          description: An array of events. For now, the value is empty.
        resumeToken:
          type: string
          description: The token/highwater mark to used as resumeAt on a future request
    EventsGet:
      title: Information about multiple events. 
      description: Ceramic event keys as part of a Ceramic Stream
      type: object
      required:
        - events
        - resumeOffset
        - isComplete
      properties:
        events:
          type: array
          items:
            schema:
            $ref: '#/components/schemas/Event'
          description: An array of events
        resumeOffset:
          type: integer
          description: An integer specifying where to resume the request. Only works correctly for the same input parameters.
        isComplete:
          type: boolean
          description: A boolean specifying if there are more events to be fetched. Repeat with the resumeOffset to get next set.
