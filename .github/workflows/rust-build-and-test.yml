name: Rust Build and Test

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  merge_group:
    branches: [ "main" ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GHA_ENABLED: "true"
  RUSTC_WRAPPER: "sccache"

jobs:
  check:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        # The prefix cache key, this can be changed to start a new cache manually.
        # default: "v0-rust"
        prefix-key: v0
        # Cache only the cargo registry
        cache-targets: false
    - uses: mozilla-actions/sccache-action@v0.0.3
    - name: Install Protoc
      run: |
        PROTOC_VERSION=3.20.1
        PROTOC_ARCH=linux-x86_64
        PROTOC_ZIP=protoc-$PROTOC_VERSION-$PROTOC_ARCH.zip
        curl --retry 3 --retry-max-time 90 -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
        sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
        sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
        rm -f $PROTOC_ZIP
        echo "PROTOC=/usr/local/bin/protoc" >> $GITHUB_ENV
        echo "PROTOC_INCLUDE=/usr/local/include" >> $GITHUB_ENV
    - name: Check fmt
      run: make check-fmt
    - name: Check clippy
      run: make check-clippy
    - name: Check generated servers
      run: |
        make check-api-server
        make check-kubo-rpc-server
  test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        # The prefix cache key, this can be changed to start a new cache manually.
        # default: "v0-rust"
        prefix-key: v0
        # Cache only the cargo registry
        cache-targets: false
    - uses: mozilla-actions/sccache-action@v0.0.3
    - name: Install Protoc
      run: |
        PROTOC_VERSION=3.20.1
        PROTOC_ARCH=linux-x86_64
        PROTOC_ZIP=protoc-$PROTOC_VERSION-$PROTOC_ARCH.zip
        curl --retry 3 --retry-max-time 90 -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
        sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
        sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
        rm -f $PROTOC_ZIP
        echo "PROTOC=/usr/local/bin/protoc" >> $GITHUB_ENV
        echo "PROTOC_INCLUDE=/usr/local/include" >> $GITHUB_ENV
    - name: Run tests
      run: make test
  build:
    runs-on: ubuntu-latest
    outputs:
      image: ${{ steps.build.outputs.build_tag }}
    steps:
    - uses: actions/checkout@v3
    - uses: dtolnay/rust-toolchain@stable
    - uses: Swatinem/rust-cache@v2
      with:
        # The prefix cache key, this can be changed to start a new cache manually.
        # default: "v0-rust"
        prefix-key: v0
        # Cache only the cargo registry
        cache-targets: false
    - uses: mozilla-actions/sccache-action@v0.0.3
    - name: Install Protoc
      run: |
        PROTOC_VERSION=3.20.1
        PROTOC_ARCH=linux-x86_64
        PROTOC_ZIP=protoc-$PROTOC_VERSION-$PROTOC_ARCH.zip
        curl --retry 3 --retry-max-time 90 -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
        sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
        sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
        rm -f $PROTOC_ZIP
        echo "PROTOC=/usr/local/bin/protoc" >> $GITHUB_ENV
        echo "PROTOC_INCLUDE=/usr/local/include" >> $GITHUB_ENV
    - name: Build
      run: make build
    -
      name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    -
      name: Login to Public ECR
      uses: docker/login-action@v2
      with:
        registry: public.ecr.aws
        username: ${{ secrets.AWS_ACCESS_KEY_ID }}
        password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      env:
        AWS_REGION: us-east-1
    -
      name: Build and Publish
      id: build
      run: |
        SHA_TAG=$(echo ${{ github.SHA }} | head -c 12)
        BUILD_TAG=$SHA_TAG
        COMMIT_MESSAGE=$(git log -1 --pretty=%B)
        if [[ $(echo "$COMMIT_MESSAGE" | grep 'chore: version v') ]]; then
          RELEASE_TAG=$(cargo metadata --format-version=1 --no-deps | jq '.packages[0].version' | tr -d '"')
          # Use the release tag to deploy, if one is available.
          BUILD_TAG=$RELEASE_TAG
        fi
        make SHA="${{ github.SHA }}" SHA_TAG="$SHA_TAG" RELEASE_TAG="$RELEASE_TAG" publish-docker
        echo "Build tag:"
        echo ${BUILD_TAG}
        echo "build_tag=${BUILD_TAG}" >> $GITHUB_OUTPUT

  correctness-tests:
    runs-on: ubuntu-latest
    environment: github-tests-2024
    needs:
      - build
    steps:
      - uses: actions/checkout@v3
      - name: Get Network template and update
        env:
          RUST_CERAMIC_IMAGE: ${{ needs.build.outputs.build_tag }}
        run: |
          sudo apt-get update && apt-get install -y curl yq
          curl -LO https://github.com/3box/ceramic-tests/releases/download/v0.2.0/hermetic-driver-x86_64-linux
          mv hermetic-driver-x86_64-linux ./bin/hermetic-driver
          chmod +x ./bin/hermetic-driver
          curl -LO https://raw.githubusercontent.com/3box/ceramic-tests/main/networks/basic-rust.yaml
          yq e '.spec.ceramic[0].ipfs.rust.image = strenv(RUST_CERAMIC_IMAGE)' basic-rust.yaml
          cat basic-rust.yaml
      -
        name: Setup GKE auth
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GKE_SA_KEY }}
      -
        name: Get GKE credentials
        uses: 'google-github-actions/get-gke-credentials@v1'
        with:
          cluster_name: ${{ vars.GKE_CLUSTER }}
          location: ${{ vars.GKE_ZONE }}
      - name: Run correctness-tests
        run: |
          ./bin/hermetic-driver test \
            --network basic-rust.yaml \
            --flavor correctness \
            --test-selector "fast"

