# CI that:
#
# * checks for a Git Tag that looks like a release ("v1.2.0")
# * creates a Github Release™️
# * builds binaries/packages with cargo-dist
# * uploads those packages to the Github Release™️
#
# Note that the Github Release™️ will be created before the packages,
# so there will be a few minutes where the release has no packages
# and then they will slowly trickle in, possibly failing. To make
# this more pleasant we mark the release as a "draft" until all
# artifacts have been successfully uploaded. This allows you to
# choose what to do with partial successes and avoids spamming
# anyone with notifications before the release is actually ready.
name: Release

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:
      level:
        description: 'Release level'
        required: true
        default: 'minor'
        type: choice
        options:
        - patch
        - minor
        - major

jobs:
  # Build and packages all the things
  build-binaries:
    strategy:
      matrix:
        # For these target platforms
        include:
        - target: x86_64-unknown-linux-gnu
          os: ubuntu-latest
          arch: x86_64
          ext: deb
          protoc-arch: linux-x86_64
        - target: x86_64-apple-darwin
          os: macos-latest
          arch: x86_64
          ext: pkg
          protoc-arch: osx-x86_64
        - target: aarch64-apple-darwin
          os: macos-latest
          config-file: fpm/osx.fpm
          arch: aarch64
          ext: pkg
          protoc-arch: osx-aarch_64
        #- target: x86_64-pc-windows-msvc
        #  os: windows-latest
    runs-on: ${{ matrix.os }}
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
      - name: Install Protoc
        run: |
          PROTOC_VERSION=3.20.1
          PROTOC_ARCH=${{ matrix.protoc-arch }}
          PROTOC_ZIP=protoc-$PROTOC_VERSION-$PROTOC_ARCH.zip
          curl --retry 3 --retry-max-time 90 -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" -OL https://github.com/protocolbuffers/protobuf/releases/download/v$PROTOC_VERSION/$PROTOC_ZIP
          sudo unzip -o $PROTOC_ZIP -d /usr/local bin/protoc
          sudo unzip -o $PROTOC_ZIP -d /usr/local 'include/*'
          rm -f $PROTOC_ZIP
          echo "PROTOC=/usr/local/bin/protoc" >> $GITHUB_ENV
          echo "PROTOC_INCLUDE=/usr/local/include" >> $GITHUB_ENV
      - name: Install Rust
        run: |
          rustup update stable
          rustup default stable
      - name: Setup target
        run: rustup target add ${{ matrix.target }}
      - name: Install ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2' # Not needed with a .ruby-version file
          bundler-cache: true # runs 'bundle install' and caches installed gems automatically
      - name: Install fpm
        run: |
          gem install fpm
      - name: Run package script
        run: |
          ./ci-scripts/package.sh -a ${{ matrix.arch }} -e ${{ matrix.ext }}
      - name: Archive artifact
        uses: actions/upload-artifact@v3
        with:
          name: ceramic-one_${{ matrix.target }}
          path: artifacts/ceramic-one.${{ matrix.ext }}

  release:
    needs: [build-binaries]
    runs-on: ubuntu-latest
    env:
      CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_TOKEN }}
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/download-artifact@v3
        with:
          path: artifacts
      - name: check artifacts
        run: |
          ls artifacts/**/*
      - id: install-cargo-release
        uses: taiki-e/install-action@v1
        with:
          tool: cargo-release
      - name: install git cliff
        run: |
          export version="1.3.0"
          wget "https://github.com/orhun/git-cliff/releases/download/v${version}/git-cliff-${version}-x86_64-unknown-linux-gnu.tar.gz"
          tar -xvzf git-cliff-*.tar.gz
          mv git-cliff-$version/git-cliff /usr/local/bin
      - id: release
        run: |
          ./ci-scripts/release.sh --level ${{ inputs.level }}